/**
* RPG Stat Manager Central Server
* This is the server for the data accass of the RPG Users
*
* OpenAPI spec version: 1.0.0
* Contact: holloszaboakos.1996@gmail.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.example.rpgstatmanager.swagger.client.apis


import com.example.rpgstatmanager.swagger.client.infrastructure.*

class TokenApi(basePath: String = "https://rpgmanager.data.io/v2") : ApiClient(basePath) {

    /**
    * request new password
    * You can ask for a new password. The requests will be checked manually. The administrator will contect you in email.
    * @param name Name of the user 
    * @return void
    */
    fun getNewPassword(name: String) : Unit {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/token/{name}".replace("{"+"name"+"}", name),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * ask for a new token
    * We us e a weak and simple method.  The client sends the name and the password. If the pair is in the database, the server returned a randomgenerated number. On later requests only the number has tob be sent. On new login every code associated with the username gets deleted.
    * @param name Name of the user 
    * @param password Name of the user 
    * @return Long
    */
    @Suppress("UNCHECKED_CAST")
    fun getToken(name: String, password: String) : Long {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/token/{name},{password}".replace("{"+"name"+"}", name).replace("{"+"password"+"}", "$password"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Long>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Long
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

}
