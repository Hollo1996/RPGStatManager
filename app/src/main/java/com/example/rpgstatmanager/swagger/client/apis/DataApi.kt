/**
* RPG Stat Manager Central Server
* This is the server for the data accass of the RPG Users
*
* OpenAPI spec version: 1.0.0
* Contact: holloszaboakos.1996@gmail.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.example.rpgstatmanager.swagger.client.apis

import com.example.rpgstatmanager.swagger.client.infrastructure.*
import com.example.rpgstatmanager.swagger.client.models.Ability
import com.example.rpgstatmanager.swagger.client.models.Adventure
import com.example.rpgstatmanager.swagger.client.models.Character
import com.example.rpgstatmanager.swagger.client.models.EmotionModifier
import com.example.rpgstatmanager.swagger.client.models.Move
import com.example.rpgstatmanager.swagger.client.models.MoveType
import com.example.rpgstatmanager.swagger.client.models.PersonalityType
import com.example.rpgstatmanager.swagger.client.models.Race
import com.example.rpgstatmanager.swagger.client.models.Stat
import com.example.rpgstatmanager.swagger.client.models.Tool
import com.example.rpgstatmanager.swagger.client.models.Weapon

class DataApi(basePath: String = "https://rpgmanager.data.io/v2") : ApiClient(basePath) {

    /**
    * add new ability
    * Uplodes a newly created ability
    * @param token Autentication number 
    * @param body the uploded ability 
    * @return void
    */
    fun createAbility(token: String, body: Ability) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/ability/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new adventure
    * Uplodes a newly created adventure
    * @param token Autentication number 
    * @param body the uploded adventure 
    * @return void
    */
    fun createAdventure(token: String, body: Adventure) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/adventure/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new character
    * Uplodes a newly created character
    * @param token Autentication number 
    * @param body the uploded character 
    * @return void
    */
    fun createCharacter(token: String, body: Character) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/character/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new emotion modifier
    * Uplodes a newly created emotion modifier
    * @param token Autentication number 
    * @param body the uploded emotion modifier 
    * @return void
    */
    fun createEmotionModifier(token: String, body: EmotionModifier) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/emotionModifier/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new move
    * Uplodes a newly created move
    * @param token Autentication number 
    * @param body the uploded move 
    * @return void
    */
    fun createMove(token: String, body: Move) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/move/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new all move type
    * Uplodes a newly created move type
    * @param token Autentication number 
    * @param body the uploded move type 
    * @return void
    */
    fun createMoveType(token: String, body: MoveType) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/moveType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new personality type
    * Uplodes a newly created personality type
    * @param token Autentication number 
    * @param body the uploded personality type 
    * @return void
    */
    fun createPersonalityType(token: String, body: PersonalityType) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/personalityType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new race
    * Uplodes a newly created race
    * @param token Autentication number 
    * @param body the uploded race 
    * @return void
    */
    fun createRace(token: String, body: Race) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/race/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new stat
    * Uplodes a newly created stat
    * @param token Autentication number 
    * @param body the uploded stat 
    * @return void
    */
    fun createStat(token: String, body: Stat) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/stat/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new tool
    * Uplodes a newly created tool
    * @param token Autentication number 
    * @param body the uploded tool 
    * @return void
    */
    fun createTool(token: String, body: Tool) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/tool/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * add new weapon
    * Uplodes a newly created weapon
    * @param token Autentication number 
    * @param body the uploded weapon 
    * @return void
    */
    fun createWeapon(token: String, body: Weapon) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/data/weapon/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing ability
    * Deletes an ability given by id
    * @param token Autentication number 
    * @param body the id of the ability to delete 
    * @return void
    */
    fun deleteAbility(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/ability/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing adventure
    * Deletes an adventure given by id
    * @param token Autentication number 
    * @param body the id of the adventure to delete 
    * @return void
    */
    fun deleteAdventure(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/adventure/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing character
    * Deletes an character given by id
    * @param token Autentication number 
    * @param body the id of the character to delete 
    * @return void
    */
    fun deleteCharacter(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/character/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing emotion modifier
    * Deletes an emotion modifier given by id
    * @param token Autentication number 
    * @param body the id of the emotion modifier to delete 
    * @return void
    */
    fun deleteEmotionModifier(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/emotionModifier/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing move
    * Deletes an move given by id
    * @param token Autentication number 
    * @param body the id of the move to delete 
    * @return void
    */
    fun deleteMove(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/move/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing move type
    * Deletes an move type given by id
    * @param token Autentication number 
    * @param body the id of the move type to delete 
    * @return void
    */
    fun deleteMoveType(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/moveType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing personality type
    * Deletes an personality type given by id
    * @param token Autentication number 
    * @param body the id of the personality type to delete 
    * @return void
    */
    fun deletePersonalityType(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/personalityType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing race
    * Deletes an race given by id
    * @param token Autentication number 
    * @param body the id of the race to delete 
    * @return void
    */
    fun deleteRace(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/race/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing stat
    * Deletes an stat given by id
    * @param token Autentication number 
    * @param body the id of the stat to delete 
    * @return void
    */
    fun deleteStat(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/stat/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete tool
    * Deletes an tool given by id
    * @param token Autentication number 
    * @param body the id of the tool to delete 
    * @return void
    */
    fun deleteTool(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/tool/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * delete existing weapon
    * Deletes an weapon given by id
    * @param token Autentication number 
    * @param body the id of the weapon to delete 
    * @return void
    */
    fun deleteWeapon(token: String, body: String) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/data/weapon/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all abilities.
    * Returnes all abilities of the loged in user.
    * @param token Autentication number 
    * @return Array<Ability>
    */
    @Suppress("UNCHECKED_CAST")
    fun listAbilities(token: String) : Array<Ability> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/ability/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Ability>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Ability>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all adventures.
    * Returnes all adventures of the loged in user.
    * @param token Autentication number 
    * @return Array<Adventure>
    */
    @Suppress("UNCHECKED_CAST")
    fun listAdventures(token: String) : Array<Adventure> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/adventure/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Adventure>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Adventure>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all characters.
    * Returnes all characters of the loged in user.
    * @param token Autentication number 
    * @return Array<Character>
    */
    @Suppress("UNCHECKED_CAST")
    fun listCharacters(token: String) : Array<Character> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/character/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Character>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Character>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all emotion modifier.
    * Returnes all emotion modifier of the loged in user.
    * @param token Autentication number 
    * @return Array<EmotionModifier>
    */
    @Suppress("UNCHECKED_CAST")
    fun listEmotionModifiers(token: String) : Array<EmotionModifier> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/emotionModifier/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<EmotionModifier>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<EmotionModifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all move type.
    * Returnes all all move type of the loged in user.
    * @param token Autentication number 
    * @return Array<MoveType>
    */
    @Suppress("UNCHECKED_CAST")
    fun listMoveTypes(token: String) : Array<MoveType> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/moveType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<MoveType>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<MoveType>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all moves.
    * Returnes all moves of the loged in user.
    * @param token Autentication number 
    * @return Array<Adventure>
    */
    @Suppress("UNCHECKED_CAST")
    fun listMoves(token: String) : Array<Adventure> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/move/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Adventure>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Adventure>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all personality type.
    * Returnes all personality type of the loged in user.
    * @param token Autentication number 
    * @return Array<PersonalityType>
    */
    @Suppress("UNCHECKED_CAST")
    fun listPersonalityType(token: String) : Array<PersonalityType> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/personalityType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<PersonalityType>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<PersonalityType>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all race.
    * Returnes all race of the loged in user.
    * @param token Autentication number 
    * @return Array<Race>
    */
    @Suppress("UNCHECKED_CAST")
    fun listRaces(token: String) : Array<Race> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/race/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Race>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Race>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all stat.
    * Returnes all stat of the loged in user.
    * @param token Autentication number 
    * @return Array<Stat>
    */
    @Suppress("UNCHECKED_CAST")
    fun listStat(token: String) : Array<Stat> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/stat/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Stat>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Stat>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all tool.
    * Returnes all tool of the loged in user.
    * @param token Autentication number 
    * @return Array<Tool>
    */
    @Suppress("UNCHECKED_CAST")
    fun listTool(token: String) : Array<Tool> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/tool/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Tool>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Tool>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get all weapon.
    * Returnes all weapon of the loged in user.
    * @param token Autentication number 
    * @return Array<Weapon>
    */
    @Suppress("UNCHECKED_CAST")
    fun listWeapon(token: String) : Array<Weapon> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/data/weapon/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Array<Weapon>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Weapon>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing ability
    * Updates a newly created ability
    * @param token Autentication number 
    * @param body the ability with updated parameters 
    * @return void
    */
    fun updateAbility(token: String, body: Ability) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/ability/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing adventure
    * Updates a newly created adventure
    * @param token Autentication number 
    * @param body the adventure with updated parameters 
    * @return void
    */
    fun updateAdventure(token: String, body: Adventure) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/adventure/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing character
    * Updates a newly created character
    * @param token Autentication number 
    * @param body the character with updated parameters 
    * @return void
    */
    fun updateCharacter(token: String, body: Character) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/character/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing emotion modifier
    * Updates a newly created emotion modifier
    * @param token Autentication number 
    * @param body the emotion modifier with updated parameters 
    * @return void
    */
    fun updateEmotionModifier(token: String, body: EmotionModifier) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/emotionModifier/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing move
    * Updates a newly created move
    * @param token Autentication number 
    * @param body the move with updated parameters 
    * @return void
    */
    fun updateMove(token: String, body: Adventure) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/move/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing move type
    * Updates a newly created move type
    * @param token Autentication number 
    * @param body the move type with updated parameters 
    * @return void
    */
    fun updateMoveType(token: String, body: MoveType) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/moveType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing personality type
    * Updates a newly created personality type
    * @param token Autentication number 
    * @param body the personality type with updated parameters 
    * @return void
    */
    fun updatePersonalityType(token: String, body: PersonalityType) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/personalityType/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing race
    * Updates a newly created race
    * @param token Autentication number 
    * @param body the race with updated parameters 
    * @return void
    */
    fun updateRace(token: String, body: Race) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/race/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing stat
    * Updates a newly created stat
    * @param token Autentication number 
    * @param body the stat with updated parameters 
    * @return void
    */
    fun updateStat(token: String, body: Stat) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/stat/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * update existing tool
    * Updates a newly created tool
    * @param token Autentication number 
    * @param body the tool with updated parameters 
    * @return void
    */
    fun updateTool(token: String, body: Tool) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/tool/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * updateWeapon
    * Updates a newly created weapon
    * @param token Autentication number 
    * @param body the weapon with updated parameters 
    * @return void
    */
    fun updateWeapon(token: String, body: Weapon) : Unit {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: Map<String,String> = mapOf()
        val acceptsHeaders: Map<String,String> = mapOf("Accept" to "application/xml, application/json")
        val localVariableHeaders: MutableMap<String,String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/data/weapon/{token}".replace("{"+"token"+"}", token),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw IllegalStateException("Undefined ResponseType.")
        }
    }

}
